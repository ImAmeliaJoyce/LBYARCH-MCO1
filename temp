%include "io64.inc"

section .text
global main
main:
    ; Ask for user input, an unsigned decimal
    ; Maximum num: 2^(63-1) = 9223372036854775807
    ; Minimum num: 1
    GET_UDEC 8, RAX
    
    ; Check for negative input
    CMP RAX, 1
    JL ERROR_NEGATIVE
    
    ; Copy the original input to RBX
    MOV RBX, RAX
    
    ; Check if the input is odd or even
    MOV RCX, 2
    MOV RDX, 0
    DIV RCX
    
    CMP RDX, 1
    JE ODD  ; if odd, jump to odd function
    
    ; if even, divide it by two
    ; STORE THE OUTPUT EARLIER TO RBX
    MOV RBX, RAX
    JMP OUTPUT
    
ODD:
    ; triple it and add 1
    MOV RAX, RBX
    MOV RCX, 3
    MOV RDX, 0  ; contains the higher order of 64-bits
    MUL RCX
    INC RAX
    
OUTPUT:
    ; Output the current term in the sequence
    PRINT_DEC 8, RBX
    PRINT_STRING ", "
    
    ; Check if the current term is 1
    CMP RBX, 1
    JE FINALLY  ; if 1, jump to finally
    
    ; Continue with the next term in the sequence
    MOV RAX, RBX
    MOV RCX, 2
    MOV RDX, 0
    DIV RCX
    MOV RBX, RAX
    JMP ODD
    
FINALLY:
    NEWLINE
    ; Prompt the user whether to continue
    PRINT_STRING "Do you want to continue (Y/N)? "
    GET_UDEC 8, RAX
    CMP RAX, 'Y'
    JE main  ; if 'Y', jump to main (input prompt)
    
    ERROR_NEGATIVE:
    ; Print error message for negative input
    PRINT_STRING "Error: Negative number input"
    NEWLINE
    
    ; Prompt the user whether to continue
    PRINT_STRING "Do you want to continue (Y/N)? "
    GET_UDEC 8, RAX
    CMP RAX, 'Y'
    JE main  ; if 'Y', jump to main (input prompt)
    
    ; Exit the program
    xor rax, rax
    ret
